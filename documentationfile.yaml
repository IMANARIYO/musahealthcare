openapi: 3.0.0
info:
  title: Musa Healthcares API
  version: "1.0.0"
  description: |
    API documentation for managing appointments in Musa Healthcares.
  contact:
    name: Imanariyo Baptiste
    email: "imanariyo@gmail.com"
    url: "tel:0787795163"
servers:
  - url: http://localhost:4600
  - url: https://musahealthcareapi.onrender.com
    description: Local development server
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:

    Tree:
      type: object
      properties:
        name:
          type: string
          description: name of tree
        images:
          type: array
          items:
            type: string
            format: binary
          description: List of image URLs
        locations:
          type: array
          items:
            type: string
          description: List of locations
        farm:
          type: array
          items:
            type: string
          description: List of farm IDs
        description:
          type: string
          description: Description of the tree
        medicines:
          type: array
          items:
            type: string
          description: List of medicine IDs
        diseasesCured:
          type: string
          description: Disease cured by the tree
        partsUsed:
          type: array
          items:
            type: string
          description: List of parts used
        patiennts:
          type: array
          items:
            type: string
          description: List of patient IDs
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          description: Error message
    Testimony:
      type: object
      properties:
        name:
          type: string
          description: The name of the testimonier
        contacts:
          type: string
          description: The contacts of the testimonier
        maintestimony:
          type: string
          description: The content of the testimony
        image:
          type: string
          format: binary
          description: The image file for the testimony it may be used as profile
        images:
          type: array
          items:
            type: string
            format: binary
          description: The additional imageslike of symptoms or what ever else files for the testimony
        date:
          type: string
          format: date-time
          description: The date of the testimony
        rating:
          type: number
          minimum: 0
          maximum: 5
          description: The rating of the testimony
        disease:
          type: string
          description: The ID of the associated disease (optional)
    Service:
      type: object
      properties:
        name:
          type: string
          description: The name of the service
        image:
          type: string
          format: binary
          description: The image of the service
        description:
          type: string
          description: Description of the service
        beneficiaries:
          type: array
          items:
            type: string
          description: List of beneficiaries
    Medicine:
     type: object
     properties:
       _id:
         type: string
         description: ID of the medicine
       name:
         type: string
         description: Name of the medicine
       description:
         type: string
         description: Description of the medicine
       price:
         type: number
         description: Price of
       images:
         type: array
         items:
           type: string
         description: Images of the medicine
       diseases:
         type: array
         items:
           type: string
         description: List of disease IDs associated with the medicine
       treesUsed:
         type: array
         items:
           type: string
         description: List of tree IDs associated with the medicine
       frequency:
         type: string
         description: Frequency of taking the medicine
       additionMaterialsTomakeIt:
         type: array
         items:
           type: string
         description: Additional materials required to make the medicine
       procedureToMake:
         type: string
         description: Procedure to make the medicine
       procedureToTake:
         type: string
         description: Procedure to take the medicine
       extraAdditionsTotakeit:
         type: array
         items:
           type: string
         description: Extra additions to take with the medicine
       beneficiaries:
         type: array
         items:
           type: string
         description: Beneficiaries of the medicine
    Partner:
      type: object
      properties:
        _id:
          type: string
          description: ID of the partner
        name:
          type: string
          description: Name of the partner
        image:
          type: string
          description: Image URL of the partner
        telephone:
          type: string
          description: Telephone number of the partner
        role:
          type: string
          description: Role of the partner
        email:
          type: string
          description: Email of the partner
        location:
          type: string
          description: Location of the partner
        description:
          type: string
          description: Description of the partner
        district:
          type: string
          description: District of the partner
    Appointment:
      type: object
      properties:
        date:
          type: string
          default: "the date on which some one wishes to be available for treat ment"
        Time:
          type: string
          default: "hour and time"
        Name:
          type: string
          default: "name of the one who wishes the appoint ment"
        Email:
          type: string
          default: "the email of the one who wants appoint should be valid as it will be used in resceiving the responses when need"
        Telephone:
          type: string
          default: "the telphone number"
        description:
          type: string
          default: "describing how he feels and why he wants appoint ment"
        response:
          type: string
          default: " responding to the appoint ment requester" 
        scheduleddate:
          type: string
          default: "date scheduled to appoint ment  and when it becomes neseccary will be sent in the designined message"   
    Disease:
      type: object
      properties:
        _id:
          type: string
          example: 60fe5b6d2fba530015d48413
        name:
          type: string
          example: Common Cold
          description: The name of the disease.
        symptoms:
          type: array
          items:
            type: string
          example: ["Cough", "Sneezing"]
          description: List of symptoms associated with the disease.
        description:
          type: string
          example: A mild viral infection
          description: Brief description of the disease.
        howItAttacks:
          type: string
          example: Airborne transmission
          description: Information on how the disease spreads or attacks.
        medicines:
          type: array
          items:
            type: string
          example: []
          description: List of medicines used to treat the disease.
        vaccinations:
          type: array
          items:
            type: string
          example: []
          description: List of vaccinations available for the disease.           
        patients:
          type: array
          items:
            type: string
          default: []
          description: List of patients diagnosed with the disease.
        tetsimonies:
          type: array
          items:
            type: string
          default: []
          description: List of tetsimonies  for the patients.  
    Farm:
      type: object
      properties:
        _id:
          type: string
          description: ID of the farm
        locations:
          type: array
          items:
            type: string
          description: List of farm locations
        googlemap:
          type: string
          description: Google Map link for the farm location
        images:
          type: array
          items:
            type: string
          description: Images of the farm
        trees:
          type: array
          items:
            type: string
          description: List of tree IDs associated with the farm
        treestypesNumber:
          type: number
          description: Number of tree types on the farm
        expectedYieldTime:
          type: string
          format: date
          description: Expected time for yield from the farm    
paths:
  /appointment/createAppointment:
    post:
      summary: Create a new appointment
      tags: [appointment]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Appointment'
      responses:
        '200':
          description: Appointment created successfully
        '400':
          description: Bad request

  /appointment/updateAppointment/{id}:
    put:
      summary: Update an appointment by ID
      tags: [appointment]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          
          
          description: ID of the appointment to update
      requestBody:
        required: true    
        content:
          application/json:
            schema:
              properties:
                Name:
                  type: string
                  default: "N/A"
                Email:
                  type: string
                  default: "immanariyobaptiste@gmail.com"               
                description:
                  type: string
                  default: "musa health care representitonal string"
                response:
                  type: string
                  default: "uzaze kuri iriya  talike  numunscg "  
                scheduleddate:
                  type: string
      responses:
        '200':
          description: Appointment updated successfully
        '400':
          description: Bad request
        '404':
          description: Appointment not found

  /appointment/deleteAppointment/{id}:
    delete:
      summary: Delete an appointment by ID
      tags: [appointment]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the appointment to delete
          schema:
            type: string
      responses:
        '200':
          description: Appointment deleted successfully
        '404':
          description: Appointment not found

  /appointment/getAllAppointments:
    get:
      summary: Get all appointments
      tags: [appointment]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of appointments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Appointment'

  /appointment/getAppointmentById/{id}:
    get:
      summary: Get an appointment by ID
      tags: [appointment]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the appointment to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Appointment retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Appointment'
        '404':
          description: Appointment not found
  /contact/createContact:
    post:
      summary: Create a new contact
      tags: [contact]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  default: John Doe
                email:
                  type: string
                  default: johndoe@example.com
                subject:
                  type: string
                  default: Inquiry
                telephone:
                  type: string
                  default: "+1234567890"
                message:
                  type: string
                  default: Hello, I have a question.
      responses:
        '201':
          description: Contact created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Contact created successfully
                  data:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: 60fe5b6d2fba530015d48413
                      name:
                        type: string
                        example: John Doe
                      email:
                        type: string
                        example: johndoe@example.com
                      subject:
                        type: string
                        example: Inquiry
                      telephone:
                        type: string
                        example: "+1234567890"
                      message:
                        type: string
                        example: Hello, I have a question.
                      dateSent:
                        type: string
                        example: "2023-07-26T14:29:09.282Z"
  /contact/replaycontact/{id}:
    put:
      summary: Update an existing contact by ID
      tags: [contact]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the contact to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                
                replaysubbject:
                  type: string
                  example: subject
             
                replaymessage:
                  type: string
                  example: Hello, I have a question.
      responses:
        '200':
          description: Contact updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Contact updated successfully
                  data:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: 60fe5b6d2fba530015d48413
                      name:
                        type: string
                        example: John Doe
                      email:
                        type: string
                        example: johndoe@example.com
                      subject:
                        type: string
                        example: Inquiry
                      telephone:
                        type: string
                        example: "+1234567890"
                      message:
                        type: string
                        example: Hello, I have a question.
                      dateSent:
                        type: string
                        example: "2023-07-26T14:29:09.282Z"
  /contact/deleteContact/{id}:
    delete:
      summary: Delete an existing contact by ID
      tags: [contact]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the contact to delete
      responses:
        '200':
          description: Contact deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Contact deleted successfully
  /contact/getAllContacts:
    get:
      summary: Retrieve all contacts
      tags: [contact]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: All contacts retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: All contacts retrieved successfully
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                          example: 60fe5b6d2fba530015d48413
                        name:
                          type: string
                          example: John Doe
                        email:
                          type: string
                          example: johndoe@example.com
                        subject:
                          type: string
                          example: Inquiry
                        telephone:
                          type: string
                          example: "+1234567890"
                        message:
                          type: string
                          example: Hello, I have a question.
                        dateSent:
                          type: string
                          example: "2023-07-26T14:29:09.282Z"
  /contact/getContactById/{id}:
    get:
      summary: Retrieve a contact by ID
      tags: [contact]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the contact to retrieve
      responses:
        '200':
          description: Contact retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Contact retrieved successfully
                  data:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: 60fe5b6d2fba530015d48413
                      name:
                        type: string
                        example: John Doe
                      email:
                        type: string
                        example: johndoe@example.com
                      subject:
                        type: string
                        example: Inquiry
                      telephone:
                        type: string
                        example: "+1234567890"
                      message:
                        type: string
                        example: Hello, I have a question.
                      dateSent:
                        type: string
                        example: "2023-07-26T14:29:09.282Z"
  /disease/createDisease:
    post:
      summary: Create a new disease
      tags: 
        - disease
      security:
        - bearerAuth: []  
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  default: Common Cold
                symptoms:
                  type: array
                  items:
                    type: string
                  default: ["Cough", "Sneezing"]
                description:
                  type: string
                  default: A mild viral infection
                howItAttacks:
                  type: string
                  default: Airborne transmission
                medicines:
                  type: array
                  items:
                    type: string
                  default: ["Paracetamol", "Cough syrup"]
                vaccinations:
                  type: array
                  items:
                    type: string
                  default: ["Flu vaccine"]
                patients:
                  type: array
                  items:
                    type: string
                  default: ["Flu vaccine"] 
                tetsimonies:
                  type: array
                  items:
                    type: string
      responses:
        '201':
          description: Disease created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Disease created successfully
                  data:
                    $ref: '#/components/schemas/Disease'
  /disease/updateDisease/{id}:
    put:
      summary: Update an existing disease by ID
      tags: 
        - disease
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the disease to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Disease'
      responses:
        '200':
          description: Disease updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Disease updated successfully
                  data:
                    $ref: '#/components/schemas/Disease'
  /disease/deleteDisease/{id}:
    delete:
      summary: Delete an existing disease by ID
      tags: 
        - disease
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the disease to delete
      responses:
        '200':
          description: Disease deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Disease deleted successfully
  /disease/getAllDiseases:
    get:
      summary: Retrieve all diseases
      tags: 
        - disease
      security:
        - bearerAuth: []
      responses:
        '200':
          description: All diseases retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: All diseases retrieved successfully
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Disease'
  /disease/getDiseaseById/{id}:
    get:
      summary: Retrieve a disease by ID
      tags: 
        - disease
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the disease to retrieve
      responses:
        '200':
          description: Disease retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Disease retrieved successfully
                  data:
                    $ref: '#/components/schemas/Disease'
  /farm/createfarms:
    post:
      summary: Create a new farm
      tags: 
        - Farm
      security:
        - bearerAuth: []
      description: Endpoint to create a new farm with support for image uploads.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                locations:
                  type: string
                  description: Comma-separated list of farm locations.
                name:
                  type: string
                  description: name of the farm 
                googlemap:
                  type: string
                  description: Google Map link for the farm location.
                images:
                  type: array
                  items:
                    type: string
                    format: binary
                  description: Images of the farm.
                trees:
                  type: string
                  description: Comma-separated list of tree IDs associated with the farm.
                treestypes:
                  type: number
                  description: Number of tree types on the farm.
                expectedYieldTime:
                  type: string
                  description: Expected time for yield from the farm.
      responses:
        '201':
          description: Farm created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Farm'
  /farm/updateFarm/{id}:
    put:
      summary: Update an existing farm
      tags:
        - Farm
      security:
        - bearerAuth: []
      description: Endpoint to update an existing farm.
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the farm to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Farm'
      responses:
        '200':
          description: Farm updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Farm'
  /farm/deleteFarm/{id}:
    delete:
      summary: Delete a farm by ID
      tags:
        - Farm
      security:
        - bearerAuth: []
      description: Endpoint to delete a farm by ID.
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the farm to delete
          schema:
            type: string
      responses:
        '200':
          description: Farm deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Farm deleted successfully
                  data:
                    type: null
  /farm/getallfarms:
    get:
      summary: Get all farms
      tags:
        - Farm
      security:
        - bearerAuth: []
      description: Endpoint to retrieve all farms.
      responses:
        '200':
          description: Successfully retrieved all farms
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Farm'
  /farm/getfarmById/{id}:
    get:
      summary: Get farm by ID
      tags:
        - Farm
      security:
        - bearerAuth: []
      description: Endpoint to retrieve a farm by ID.
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the farm to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved farm by ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Farm'
  /medicine/createMedicine:
    post:
      summary: Create a new medicine
      tags: 
        - Medicine
      security:
        - bearerAuth: []
      description: Endpoint to create a new medicine with support for image uploads.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name of the medicine
                description:
                  type: string
                  description: Description of the medicine
                price:
                  type: number
                images:
                  type: array
                  items:
                    type: string
                    format: binary
                  description: Images of the medicine
                diseases:
                  type: array
                  items:
                    type: string
                  description: List of disease IDs associated with the medicine
                treesUsed:
                  type: array
                  items:
                    type: string
                  description: List of tree IDs associated with the medicine
                frequency:
                  type: string
                  description: Frequency of taking the medicine
                additionMaterialsTomakeIt:
                  type: array
                  items:
                    type: string
                  description: Additional materials required to make the medicine
                procedureToMake:
                  type: string
                  description: Procedure to make the medicine
                procedureToTake:
                  type: string
                  description: Procedure to take the medicine
                extraAdditionsTotakeit:
                  type: array
                  items:
                    type: string
                  description: Extra additions to take with the medicine
                beneficiaries:
                  type: array
                  items:
                    type: string
                  description: Beneficiaries of the medicine
      responses:
        '201':
          description: Medicine created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Medicine'
  /medicine/updateMedicine/{id}:
    put:
      summary: Update an existing medicine
      tags:
        - Medicine
      security:
        - bearerAuth: []
      description: Endpoint to update an existing medicine.
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the medicine to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Medicine'
      responses:
        '200':
          description: Medicine updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Medicine'
  /medicine/deleteMedicine/{id}:
    delete:
      summary: Delete a medicine by ID
      tags:
        - Medicine
      security:
        - bearerAuth: []
      description: Endpoint to delete a medicine by ID.
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the medicine to delete
          schema:
            type: string
      responses:
        '200':
          description: Medicine deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Medicine deleted successfully
                  data:
                    type: null
  /medicine/getAllMedicines:
    get:
      summary: Get all medicines
      tags:
        - Medicine
      security:
        - bearerAuth: []
      description: Endpoint to retrieve all medicines.
      responses:
        '200':
          description: Successfully retrieved all medicines
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Medicine'
  /medicine/getMedicineById/{id}:
    get:
      summary: Get medicine by ID
      tags:
        - Medicine
      security:
        - bearerAuth: []
      description: Endpoint to retrieve a medicine by ID.
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the medicine to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved medicine by ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Medicine'

   

  /partner/createPartner:
    post:
      summary: Create a new partner
      tags: 
        - Partner
      security:
        - bearerAuth: []
      description: Endpoint to create a new partner with support for image uploads.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name of the partner
                image:
                  type: string
                  format: binary
                  description: Image of the partner
                telephone:
                  type: string
                  description: Telephone number of the partner
                role:
                  type: string
                  description: Role of the partner
                email:
                  type: string
                  description: Email of the partner
                location:
                  type: string
                  description: Location of the partner
                description:
                  type: string
                  description: Description of the partner
                district:
                  type: string
                  description: District of the partner
      responses:
        '201':
          description: Partner created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Partner'
  /partner/updatePartner/{id}:
    put:
      summary: Update an existing partner
      tags:
        - Partner
      security:
        - bearerAuth: []
      description: Endpoint to update an existing partner.
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the partner to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Partner'
      responses:
        '200':
          description: Partner updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Partner'
  /partner/deletePartner/{id}:
    delete:
      summary: Delete a partner by ID
      tags:
        - Partner
      security:
        - bearerAuth: []
      description: Endpoint to delete a partner by ID.
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the partner to delete
          schema:
            type: string
      responses:
        '200':
          description: Partner deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Partner deleted successfully
                  data:
                    type: null
  /partner/getAllPartners:
    get:
      summary: Get all partners
      tags:
        - Partner
      security:
        - bearerAuth: []
      description: Endpoint to retrieve all partners.
      responses:
        '200':
          description: Successfully retrieved all partners
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Partner'
  /partner/getPartnerById/{id}:
    get:
      summary: Get partner by ID
      tags:
        - Partner
      security:
        - bearerAuth: []
      description: Endpoint to retrieve a partner by ID.
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the partner to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved partner by ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Partner'
  /service/createService:
    post:
      tags:
        - Service
      security:
        - bearerAuth: []
      summary: Create a new service
      operationId: createService
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Service'
      responses:
        '200':
          description: Service created successfully
        '500':
          description: Internal server error
  /service/readServices:
    get:
      tags:
        - Service
      security:
       - bearerAuth: []
      summary: Get all services
      operationId: getServices
      responses:
        '200':
          description: List of services
        '500':
          description: Internal server error
  /service/readServices/{id}:
    get:
      tags:
        - Service
      security:
       - bearerAuth: []
      summary: Get a service by ID
      operationId: getServiceById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the service
      responses:
        '200':
          description: Service found
        '404':
          description: Service not found
        '500':
          description: Internal server error
  /service/updateService/{id}:
    put:
      tags:
        - Service
      security:
        - bearerAuth: []
      summary: Update a service by ID
      operationId: updateServiceById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the service
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Service'
      responses:
        '200':
          description: Service updated successfully
        '404':
          description: Service not found
        '500':
          description: Internal server error
  /service/deleteService/{id}:
    delete:
      tags:
        - Service
      security:
        - bearerAuth: []
      summary: Delete a service by ID
      operationId: deleteServiceById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the service
      responses:
        '200':
          description: Service deleted successfully
        '404':
          description: Service not found
        '500':
          description: Internal server error
  /testimony/createTestimony:
    post:
      tags:
        - Testimony
      security:
        - bearerAuth: []
      summary: Create a new testimony
      operationId: createTestimony
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Testimony'
      responses:
        '200':
          description: Testimony created successfully
        '500':
          description: Internal server error
  /testimony/getTestimony:
    get:
      tags:
        - Testimony
      summary: Get all testimonies
      operationId: getTestimonies
      responses:
        '200':
          description: List of testimonies
        '500':
          description: Internal server error
  /testimony/getTestimony/{id}:
    get:
      tags:
        - Testimony
      security:
        - bearerAuth: []
      summary: Get a testimony by ID
      operationId: getTestimonyById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the testimony
      responses:
        '200':
          description: Testimony found
        '404':
          description: Testimony not found
        '500':
          description: Internal server error
  /testimony/updateTestimony/{id}:
    put:
      tags:
        - Testimony
      security:
        - bearerAuth: []
      summary: Update a testimony by ID
      operationId: updateTestimonyById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the testimony
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Testimony'
      responses:
        '200':
          description: Testimony updated successfully
        '404':
          description: Testimony not found
        '500':
          description: Internal server error
  /testimony/deleteTestimony/{id}:
    delete:
      tags:
        - Testimony
      security:
        - bearerAuth: []
      summary: Delete a testimony by ID
      operationId: deleteTestimonyById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the testimony
      responses:
        '200':
          description: Testimony deleted successfully
        '404':
          description: Testimony not found
        '500':
         description: Internal server error
  /patient/createPatient:
   post:
     summary: Create a new patient.
     tags: [patient]
     requestBody:
       required: true
       content:
         multipart/form-data:
           schema:
             type: object
             properties:
               name:
                 type: string
               email:
                 type: string
               phone:
                 type: string
               location:
                 type: string
               disease:
                 type: array
                 items:
                   type: string
                 description: List of disease IDs
               description:
                 type: string
               image:
                 type: string
                 format: binary
     responses:
       '200':
         description: A successful response
  /patient/getAllPatients:
    get:
      summary: Get all patients.
      tags: [patient]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A successful response
  /patient/getPatientById:
    get:
      summary: Get a patient by ID.
      tags: [patient]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A successful response
  /patient/updatePatient/{id}:
    put:
      summary: Update a patient by ID.
      tags: [patient]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the patient to update
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                phone:
                  type: string
                location:
                  type: string
                disease:
                  type: array
                  items:
                    type: string
                  description: List of disease IDs
                description:
                  type: string
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: A successful response
  /patient/deletePatient/{id}:
    delete:
      summary: Delete a patient by ID.
      tags: [patient]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the patient to delete
      responses:
        '200':
          description: A successful response
  /auth/deleteUserById/{id}:
    delete:
      summary: "Delete a user by ID"
      tags:
        - 'authentication'
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID of the user to be deleted
      responses:
        '200':
          description: "User deleted successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: "Success message"
                    example: "User deleted successfully"
                  
        '404':
          description: "User not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: "Error message"
                    example: "User not found"
        '500':
          description: "Internal Server Error"
            
  /auth/signup:
    post:
      summary: User Signup
      tags: [authentication]
      operationId: signup
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - fullNames
                - email
                - password
                - phoneNumber
                - sex
                - location
                - role
              properties:
                fullNames:
                  type: string
                  example: "John Doe"
                sex:
                  type: string
                  example: "Male"  
                email:
                  type: string
                  example: "imanariyobaptiste@gmail.com"
                password:
                  type: string
                  example: "123"
                phoneNumber:
                  type: number
                  example: 1234567890
                location:
                  type: string
                  example: "City, Country"
                role:
                  type: string
                  example: "user"
      responses:
        '200':
          description: User registered successfully
        '500':
          description: Internal Server Error

  /auth/login:
    post:
      summary: User Login
      tags: [authentication]
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  example: "imanariyobaptiste@gmail.com"
                password:
                  type: string
                  example: "123"
      responses:
        '200':
          description: User logged in successfully
        '401':
          description: Unauthorized - Invalid credentials
        '500':
          description: Internal Server Error

  /auth/forget:
    post:
      summary: Generate and Send OTP for Password Reset
      tags: [authentication]

      operationId: generateAndSendOTP
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  example: "imanariyobaptiste@gmail.com"
      responses:
        '200':
          description: OTP generated and sent successfully
        '404':
          description: User not found
        '500':
          description: Internal Server Error

  /auth/reset:
    post:
      summary: Verify OTP and Update Password
      tags: [authentication]
      operationId: verifyOTPAndUpdatePassword
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - otp
                - newpassword
              properties:
                email:
                  type: string
                  example: "imanariyobaptiste@gmail.com"
                otp:
                  type: string
                  example: "4225261"
                newpassword:
                  type: string
                  example: "123"
      responses:
        '200':
          description: Password updated successfully
        '404':
          description: User not found
        '401':
          description: Unauthorized - Invalid OTP
        '500':
          description: Internal Server Error

  /auth/change:
    post:
      summary: Change Password (Authenticated Route)
      tags: [authentication]
      operationId: changepassword
      parameters:
        - name: Authorization
          in: header
          description: JWT token obtained after user login
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - currentpassword
                - newpassword
              properties:
                currentpassword:
                  type: string
                  example: "123"
                newpassword:
                  type: string
                  example: "123"
      responses:
        '200':
          description: Password changed successfully
        '401':
          description: Unauthorized - Invalid token
        '500':
          description: Internal Server Error
  /auth/getAllUsers:
    get:
      summary: 'Get all users'
      tags:
        - 'authentication'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 'Users retrieved successfully'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: 'Success message'
                    example: 'Users retrieved successfully'
                  users:
                    type: array
                    description: 'List of users'
                    items:
                      type: object
                      properties:
                        email:
                          type: string
                          description: 'User email'
                        location:
                          type: string
                          description: 'User location'
                        fullname:
                          type: string
                          description: 'User full name'
                        phone:
                          type: string
                          description: 'User phone number'
                        role:
                          type: string
                          enum: 
                            - user
                            - admin
                            - travelAgency
                            - routesSetter
                          description: 'User role'
        '404':
          description: 'No users found'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: 'Error message'
                    example: 'No users found'
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: 'Error message'
                    example: 'Internal Server Error'
  /auth/updateUserById/{id}:
    patch:
      summary: "Update a user by ID"
      tags:
        - 'authentication'
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - fullNames
                - email
                - password
                - phoneNumber
                - sex
                - location
                - role
              properties:
                fullNames:
                  type: string
                  example: "John Doe"
                sex:
                  type: string
                  example: "Male"  
                email:
                  type: string
                  example: "imanariyobaptiste@gmail.com"
                password:
                  type: string
                  example: "123"
                phoneNumber:
                  type: number
                  example: 1234567890
                location:
                  type: string
                  example: "City, Country"
                role:
                  type: string
                  example: "user"
      responses:
        '200':
          description: User registered successfully
        '500':
          description: Internal Server Error

  /auth/login:
    post:
      summary: User Login
      tags: [authentication]
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  example: "imanariyobaptiste@gmail.com"
                password:
                  type: string
                  example: "123"
      responses:
        '200':
          description: User logged in successfully
        '401':
          description: Unauthorized - Invalid credentials
        '500':
          description: Internal Server Error

  /auth/forget:
    post:
      summary: Generate and Send OTP for Password Reset
      tags: [authentication]

      operationId: generateAndSendOTP
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  example: "imanariyobaptiste@gmail.com"             
      responses:
        '200':
          description: User updated successfully
        '500':
          description: Internal Server Error
  /tree/createTree:
    post:
      summary: Create a new tree
      tags:
        - tree
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Tree'
      responses:
        '201':
          description: Tree created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tree'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /tree/getAllTrees:
    get:
      summary: Get all trees
      tags:
        - tree
      responses:
        '200':
          description: List of trees retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tree'
        '404':
          description: No trees found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /tree/getTreeById/{id}:
    get:
      summary: Get a tree by ID
      tags:
        - tree
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the tree
          schema:
            type: string
      responses:
        '200':
          description: Tree retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tree'
        '404':
          description: Tree not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /tree/updateTree/{id}:
    put:
      summary: Update a tree by ID
      tags:
        - tree
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the tree
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Tree'
      responses:
        '200':
          description: Tree updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tree'
        '404':
          description: Tree not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /tree/deleteTree/{id}:
    delete:
      summary: Delete a tree by ID
      tags:
        - tree
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the tree
          schema:
            type: string
      responses:
        '200':
          description: Tree deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tree'
        '404':
          description: Tree not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'        

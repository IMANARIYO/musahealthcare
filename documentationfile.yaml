openapi: 3.0.0
info:
  title: Musa Healthcares API
  version: "1.0.0"
  description: |
    API documentation for managing appointments in Musa Healthcares.
  contact:
    name: Imanariyo Baptiste
    email: "imanariyo@gmail.com"
    url: "tel:0787795163"
servers:
  - url: http://localhost:4500
  - url: https://musahealthcareapi.onrender.com
    description: Local development server
components:
  schemas:
    Appointment:
      type: object
      properties:
        date:
          type: string
          default: "N/A"
        Time:
          type: string
          default: "N/A"
        Name:
          type: string
          default: "N/A"
        Email:
          type: string
          default: "N/A"
        Telephone:
          type: string
          default: "N/A"
        description:
          type: string
          default: "N/A"
        response:
          type: string
          default: "N/A"
    Disease:
      type: object
      properties:
        _id:
          type: string
          example: 60fe5b6d2fba530015d48413
        name:
          type: string
          example: Common Cold
          description: The name of the disease.
        symptoms:
          type: array
          items:
            type: string
          example: ["Cough", "Sneezing"]
          description: List of symptoms associated with the disease.
        description:
          type: string
          example: A mild viral infection
          description: Brief description of the disease.
        howItAttacks:
          type: string
          example: Airborne transmission
          description: Information on how the disease spreads or attacks.
        medicines:
          type: array
          items:
            type: string
          example: []
          description: List of medicines used to treat the disease.
        vaccinations:
          type: array
          items:
            type: string
          example: []
          description: List of vaccinations available for the disease.           
        patients:
          type: array
          items:
            type: string
          default: []
          description: List of patients diagnosed with the disease.
paths:
  /appointment/createAppointment:
    post:
      summary: Create a new appointment
      tags: [appointment]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Appointment'
      responses:
        '200':
          description: Appointment created successfully
        '400':
          description: Bad request

  /appointment/updateAppointment/{id}:
    put:
      summary: Update an appointment by ID
      tags: [appointment]
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the appointment to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Appointment'
      responses:
        '200':
          description: Appointment updated successfully
        '400':
          description: Bad request
        '404':
          description: Appointment not found

  /appointment/deleteAppointment/{id}:
    delete:
      summary: Delete an appointment by ID
      tags: [appointment]
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the appointment to delete
          schema:
            type: string
      responses:
        '200':
          description: Appointment deleted successfully
        '404':
          description: Appointment not found

  /appointment/getAllAppointments:
    get:
      summary: Get all appointments
      tags: [appointment]
      responses:
        '200':
          description: A list of appointments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Appointment'

  /appointment/getAppointmentById/{id}:
    get:
      summary: Get an appointment by ID
      tags: [appointment]
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the appointment to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Appointment retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Appointment'
        '404':
          description: Appointment not found
  /contact/createContact:
    post:
      summary: Create a new contact
      tags: [contact]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  default: John Doe
                email:
                  type: string
                  default: johndoe@example.com
                subject:
                  type: string
                  default: Inquiry
                telephone:
                  type: string
                  default: "+1234567890"
                message:
                  type: string
                  default: Hello, I have a question.
      responses:
        '201':
          description: Contact created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Contact created successfully
                  data:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: 60fe5b6d2fba530015d48413
                      name:
                        type: string
                        example: John Doe
                      email:
                        type: string
                        example: johndoe@example.com
                      subject:
                        type: string
                        example: Inquiry
                      telephone:
                        type: string
                        example: "+1234567890"
                      message:
                        type: string
                        example: Hello, I have a question.
                      dateSent:
                        type: string
                        example: "2023-07-26T14:29:09.282Z"
  /contact/updateContact/{id}:
    put:
      summary: Update an existing contact by ID
      tags: [contact]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the contact to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  default: John Doe
                email:
                  type: string
                  default: johndoe@example.com
                subject:
                  type: string
                  default: Inquiry
                telephone:
                  type: string
                  default: "+1234567890"
                message:
                  type: string
                  default: Hello, I have a question.
      responses:
        '200':
          description: Contact updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Contact updated successfully
                  data:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: 60fe5b6d2fba530015d48413
                      name:
                        type: string
                        example: John Doe
                      email:
                        type: string
                        example: johndoe@example.com
                      subject:
                        type: string
                        example: Inquiry
                      telephone:
                        type: string
                        example: "+1234567890"
                      message:
                        type: string
                        example: Hello, I have a question.
                      dateSent:
                        type: string
                        example: "2023-07-26T14:29:09.282Z"
  /contact/deleteContact/{id}:
    delete:
      summary: Delete an existing contact by ID
      tags: [contact]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the contact to delete
      responses:
        '200':
          description: Contact deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Contact deleted successfully
  /contact/getAllContacts:
    get:
      summary: Retrieve all contacts
      tags: [contact]
      responses:
        '200':
          description: All contacts retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: All contacts retrieved successfully
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                          example: 60fe5b6d2fba530015d48413
                        name:
                          type: string
                          example: John Doe
                        email:
                          type: string
                          example: johndoe@example.com
                        subject:
                          type: string
                          example: Inquiry
                        telephone:
                          type: string
                          example: "+1234567890"
                        message:
                          type: string
                          example: Hello, I have a question.
                        dateSent:
                          type: string
                          example: "2023-07-26T14:29:09.282Z"
  /contact/getContactById/{id}:
    get:
      summary: Retrieve a contact by ID
      tags: [contact]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the contact to retrieve
      responses:
        '200':
          description: Contact retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Contact retrieved successfully
                  data:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: 60fe5b6d2fba530015d48413
                      name:
                        type: string
                        example: John Doe
                      email:
                        type: string
                        example: johndoe@example.com
                      subject:
                        type: string
                        example: Inquiry
                      telephone:
                        type: string
                        example: "+1234567890"
                      message:
                        type: string
                        example: Hello, I have a question.
                      dateSent:
                        type: string
                        example: "2023-07-26T14:29:09.282Z"
  /disease/createDisease:
    post:
      summary: Create a new disease
      tags: 
        - disease
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  default: Common Cold
                symptoms:
                  type: array
                  items:
                    type: string
                  default: ["Cough", "Sneezing"]
                description:
                  type: string
                  default: A mild viral infection
                howItAttacks:
                  type: string
                  default: Airborne transmission
                medicines:
                  type: array
                  items:
                    type: string
                  default: ["Paracetamol", "Cough syrup"]
                vaccinations:
                  type: array
                  items:
                    type: string
                  default: ["Flu vaccine"]
                patients:
                  type: array
                  items:
                    type: string
                  default: ["Flu vaccine"]  

      responses:
        '201':
          description: Disease created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Disease created successfully
                  data:
                    $ref: '#/components/schemas/Disease'
  /disease/updateDisease/{id}:
    put:
      summary: Update an existing disease by ID
      tags: 
        - disease
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the disease to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Disease'
      responses:
        '200':
          description: Disease updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Disease updated successfully
                  data:
                    $ref: '#/components/schemas/Disease'
  /disease/deleteDisease/{id}:
    delete:
      summary: Delete an existing disease by ID
      tags: 
        - disease
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the disease to delete
      responses:
        '200':
          description: Disease deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Disease deleted successfully
  /disease/getAllDiseases:
    get:
      summary: Retrieve all diseases
      tags: 
        - disease
      responses:
        '200':
          description: All diseases retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: All diseases retrieved successfully
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Disease'
  /disease/getDiseaseById/{id}:
    get:
      summary: Retrieve a disease by ID
      tags: 
        - disease
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the disease to retrieve
      responses:
        '200':
          description: Disease retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Disease retrieved successfully
                  data:
                    $ref: '#/components/schemas/Disease'
  /farm/createfarms:
    post:
      summary: Create a new farm
      tags: 
        - Farm
      description: Endpoint to create a new farm with support for image uploads.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                locations:
                  type: string
                  description: Comma-separated list of farm locations.
                googlemap:
                  type: string
                  description: Google Map link for the farm location.
                images:
                  type: array
                  items:
                    type: string
                    format: binary
                  description: Images of the farm.
                trees:
                  type: string
                  description: Comma-separated list of tree IDs associated with the farm.
                treestypes:
                  type: number
                  description: Number of tree types on the farm.
                expectedYieldTime:
                  type: string
                  description: Expected time for yield from the farm.
      responses:
        '201':
          description: Farm created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Farm'
  /farm/updateFarm/{id}:
    put:
      summary: Update an existing farm
      tags:
        - Farm
      description: Endpoint to update an existing farm.
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the farm to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Farm'
      responses:
        '200':
          description: Farm updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Farm'
  /farm/deleteFarm/{id}:
    delete:
      summary: Delete a farm by ID
      tags:
        - Farm
      description: Endpoint to delete a farm by ID.
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the farm to delete
          schema:
            type: string
      responses:
        '200':
          description: Farm deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Farm deleted successfully
                  data:
                    type: null
  /farm/getallfarms:
    get:
      summary: Get all farms
      tags:
        - Farm
      description: Endpoint to retrieve all farms.
      responses:
        '200':
          description: Successfully retrieved all farms
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Farm'
  /farm/getfarmById/{id}:
    get:
      summary: Get farm by ID
      tags:
        - Farm
      description: Endpoint to retrieve a farm by ID.
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the farm to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved farm by ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Farm'
components:
  schemas:
    Farm:
      type: object
      properties:
        _id:
          type: string
          description: ID of the farm
        locations:
          type: array
          items:
            type: string
          description: List of farm locations
        googlemap:
          type: string
          description: Google Map link for the farm location
        images:
          type: array
          items:
            type: string
          description: Images of the farm
        trees:
          type: array
          items:
            type: string
          description: List of tree IDs associated with the farm
        treestypes:
          type: number
          description: Number of tree types on the farm
        expectedYieldTime:
          type: string
          format: date
          description: Expected time for yield from the farm
